using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Text;
using System.Threading.Tasks;
using Xunit;
using static DependenceyInjectionGeneratorTests.TestHelpers;

namespace DependenceyInjectionGeneratorTests;

public class GeneratorTests
{
    private const string expectedAttributeCode = @"// <auto-generated />
[System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal class AddServiceAttribute : System.Attribute
{
}
";
    private const string generatedFileNameSufix = @"DependencyInjectionGenerator\DependencyInjectionGenerator.Generator\";
    private const string generatedFileName = $@"{generatedFileNameSufix}GeneratedServicesExtension.Generated.cs";
    private static readonly (string, SourceText) expectedAttribute = ($@"{generatedFileNameSufix}AddService.Generated.cs", SourceText.From(expectedAttributeCode, Encoding.UTF8));

    [Fact]
    public async Task NoCallToAddServicesGeneratesNoExtensionMethod()
    {
        var source = @"namespace SourceGeneratorWeb { }";

        await GetTestRunner(source, OutputKind.DynamicallyLinkedLibrary, expectedAttribute)
            .RunAsync();
    }

    [Fact]
    public async Task GeneratedCodeWithoutServicesWork()
    {
        var source = @"
using Microsoft.Extensions.DependencyInjection;
namespace SourceGeneratorWeb
{
    class C
    {
        void M(IServiceCollection services)
        {
            services.AddServicesToDI();
        }
    }
}";

        const string expectedExtensionCode = @"// <auto-generated />
using Microsoft.Extensions.DependencyInjection;

namespace SourceGeneratorWeb
{
    public static class GeneratedServicesExtension
    {
        public static void AddServicesToDI(this IServiceCollection services)
        {
        }
    }
}
";

        await GetTestRunner(source, OutputKind.DynamicallyLinkedLibrary, expectedAttribute, (generatedFileName, SourceText.From(expectedExtensionCode, Encoding.UTF8)))
            .RunAsync();
    }

    [Fact]
    public async Task GeneratedCodeWithOneService()
    {
        var source = @"
using Microsoft.Extensions.DependencyInjection;
namespace SourceGeneratorWeb
{
    class C
    {
        void M(IServiceCollection services)
        {
             services.AddServicesToDI();
        }
    }
    [AddService]
    class MyService
    {
    }
}";

        const string expectedExtensionCode = @"// <auto-generated />
using Microsoft.Extensions.DependencyInjection;

namespace SourceGeneratorWeb
{
    public static class GeneratedServicesExtension
    {
        public static void AddServicesToDI(this IServiceCollection services)
        {
            services.AddScoped<SourceGeneratorWeb.MyService>();
        }
    }
}
";

        await GetTestRunner(source, OutputKind.DynamicallyLinkedLibrary, expectedAttribute, (generatedFileName, SourceText.From(expectedExtensionCode, Encoding.UTF8)))
            .RunAsync();
    }

    [Fact]
    public async Task GeneratedCodeWithTwoServices()
    {
        var source = @"
using Microsoft.Extensions.DependencyInjection;
namespace SourceGeneratorWeb
{
    class C
    {
        void M(IServiceCollection services)
        {
             services.AddServicesToDI();
        }
    }
    [AddService]
    class MyService1
    {
    }
    [AddService]
    class MyService2
    {
    }
}";

        const string expectedExtensionCode = @"// <auto-generated />
using Microsoft.Extensions.DependencyInjection;

namespace SourceGeneratorWeb
{
    public static class GeneratedServicesExtension
    {
        public static void AddServicesToDI(this IServiceCollection services)
        {
            services.AddScoped<SourceGeneratorWeb.MyService1>();
            services.AddScoped<SourceGeneratorWeb.MyService2>();
        }
    }
}
";

        await GetTestRunner(source, OutputKind.DynamicallyLinkedLibrary, expectedAttribute, (generatedFileName, SourceText.From(expectedExtensionCode, Encoding.UTF8)))
            .RunAsync();
    }

    [Fact]
    public async Task GeneratedCodeWithDifferentNamespace()
    {
        var source = @"
using Microsoft.Extensions.DependencyInjection;
namespace MyNamespace
{
    class C
    {
        void M(IServiceCollection services)
        {
             services.AddServicesToDI();
        }
    }
    [AddService]
    class MyService
    {
    }
}";

        const string expectedExtensionCode = @"// <auto-generated />
using Microsoft.Extensions.DependencyInjection;

namespace MyNamespace
{
    public static class GeneratedServicesExtension
    {
        public static void AddServicesToDI(this IServiceCollection services)
        {
            services.AddScoped<MyNamespace.MyService>();
        }
    }
}
";

        await GetTestRunner(source, OutputKind.DynamicallyLinkedLibrary, expectedAttribute, (generatedFileName, SourceText.From(expectedExtensionCode, Encoding.UTF8)))
            .RunAsync();
    }

    [Fact]
    public async Task GeneratedCodeWithoutNamespace()
    {
        var source = @"
using Microsoft.Extensions.DependencyInjection;
class C
{
    void M(IServiceCollection services)
    {
         services.AddServicesToDI();
    }
}
[AddService]
class MyService
{
}";

        const string expectedExtensionCode = @"// <auto-generated />
using Microsoft.Extensions.DependencyInjection;

public static class GeneratedServicesExtension
{
    public static void AddServicesToDI(this IServiceCollection services)
    {
        services.AddScoped<MyService>();
    }
}
";

        await GetTestRunner(source, OutputKind.DynamicallyLinkedLibrary, expectedAttribute, (generatedFileName, SourceText.From(expectedExtensionCode, Encoding.UTF8)))
            .RunAsync();
    }
}
